{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/My posts/MyPosts.module.css","Components/Profile/My posts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/My posts/Post/Post.jsx","Components/Profile/My posts/MyPosts.jsx","Components/Profile/My posts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","className","s","mainImg","src","alt","descriptionBlock","photos","large","Preloader","Post","item","message","likesCount","maxLength30","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","postElements","posts","map","p","React","createRef","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","postData","dispatch","addPostCreator","Profile","isAuth","content","to","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","updateUserStatus","Component","compose","auth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.f5ce4341.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainImg\":\"ProfileInfo_mainImg__2zUFY\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1wwUX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"MyPosts_descriptionBlock__13aLH\",\"posts\":\"MyPosts_posts__1-nSp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3afvt\"};","import React, {useState, useEffect} from 'react';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    // let stateWithSetState = useState(true);\n    // let editMode = stateWithSetState[0];\n    // let setEditMode = stateWithSetState[1];\n\n    let [status, setStatus] =  useState(props.status);\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    useEffect (() => {\n        setStatus(props.status)\n        }, [props.status]);\n\n    let actitvateEditMode = () => {\n        setEditMode(true)\n    };\n\n    let deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={actitvateEditMode}>{props.status || \"put your status here\"}</span>\n                </div>\n            }\n            {editMode &&\n            <div>\n                <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange}\n                       value={status}/>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;\n","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\n\nconst ProfileInfo = (props) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.mainImg}>\n                <img\n                    src=\"https://images.pexels.com/photos/66997/pexels-photo-66997.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\n                    alt=\"banner\"/>\n            </div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large}/>\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    );\n}\n\nexport default ProfileInfo;\n","import React from 'react';\nimport s from './Post.module.css';\n\nfunction Post(props) {\n    return (\n        <div className={s.item}>\n            {props.message}\n            <span>{props.likesCount} likes</span>\n        </div>\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\n\n\n\nconst MyPosts = (props) => {\n\n    let postElements =\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\n    //p-это элемент из массива postData в State\n\n    let newPostElement = React.createRef();\n\n    let onAddPost = (values) => {\n\n       props.addPost(values.newPostText);\n\n     };\n\n\n    return (\n        <div className={s.descriptionBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postElements}\n            </div>\n        </div>\n    );\n}\nconst maxLength30 = maxLengthCreator(30);\n\nconst AddNewPostForm = (props) => {\n    return (\n    <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field component={Textarea} name=\"newPostText\" placeholder=\"Type your message\"\n                   validate={[required, maxLength30]}/>\n\n            <div>\n                <button>Add Post</button>\n            </div>\n        </div>\n\n    </form>\n    )\n}\n\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\n\nexport default MyPosts;","import React from 'react';\nimport {addPostCreator, updateNewPostTextCreator} from \"../../../Redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.postData,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToStore = (dispatch) => {\n    return {\n            addPost: (newPostText) => {\n            dispatch(addPostCreator(newPostText))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToStore)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./My posts/MyPostsContainer\";\nimport {Redirect} from \"react-router-dom\";\n\n\nfunction Profile(props) {\n    if (!props.isAuth) return <Redirect to={'/login'}/>\n    return (\n        <div className={s.content}>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer\n            />\n        </div>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, getUserStatus, setStatus, updateUserStatus} from \"../../Redux/profile-reducer\";\nimport {Redirect, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\n\nclass ProfileContainer extends React.Component {\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if(!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getUserStatus(userId)\n    }\n\n    render() {\n        return (\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateUserStatus}/>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n   })\n\nexport default compose (\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer);\n\n//см как было в DialogsContainer\n"],"sourceRoot":""}